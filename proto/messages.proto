syntax = "proto2";

import "nanopb.proto";

enum SensorType {
  MIST_SENSOR = 0;
  AIR_SENSOR = 1;
  LIGHT_SENSOR = 2;
  SOIL_SENSOR = 3;
}

message MistSensor {
  required SensorType sensor_type = 1 [default = MIST_SENSOR];
  required int64 timestamp = 2 [default = 0];
  required float temperature = 3;
  required float humidity = 4;
  required bytes mac_addr = 5 [(nanopb).max_size = 6, (nanopb).fixed_length = true];
}

message AirSensor {
  required SensorType sensor_type = 1 [default = AIR_SENSOR];
  required int64 timestamp = 2 [default = 0];
  required float temperature = 3;
  required float humidity = 4;
  required float pressure = 5;
  required int32 voc_index = 6;
  required bytes mac_addr = 7 [(nanopb).max_size = 6, (nanopb).fixed_length = true];
}

message LightSensor {
  required SensorType sensor_type = 1 [default = LIGHT_SENSOR];
  required int64 timestamp = 2 [default = 0];
  required uint64 intensity = 3;
  required bytes mac_addr = 4 [(nanopb).max_size = 6, (nanopb).fixed_length = true];
}

message SoilSensor {
  required SensorType sensor_type = 1 [default = SOIL_SENSOR];
  required int64 timestamp = 2 [default = 0];
  required uint64 moisture = 3;
  required bytes mac_addr = 4 [(nanopb).max_size = 6, (nanopb).fixed_length = true];
}

enum MessageType {
  SENSOR_DATA = 0;
  SENSOR_COMMAND = 1;
  SLAVERY_HANDSHAKE = 2;
  SYNC_TIME = 3;
}

message SensorData {
  required MessageType message_type = 1 [default = SENSOR_DATA];
  required SensorType sensor_type = 2;
  oneof body {
    MistSensor mist_sensor = 3;
    AirSensor air_sensor = 4;
    LightSensor light_sensor = 5;
    SoilSensor soil_sensor = 6;
  }
}

message SensorCommand {
  required MessageType message_type = 1 [default = SENSOR_COMMAND];
  required int64 id = 2;
  optional bytes master_mac_addr = 3 [(nanopb).max_size = 6, (nanopb).fixed_length = true];
  optional bytes sensor_mac_addr = 4 [(nanopb).max_size = 6, (nanopb).fixed_length = true];
  oneof body {
    SleepCycle sleep_cycle = 5;
    SampleRate sample_rate = 6;
  }
}

message SlaveryHandshake {
  required MessageType message_type = 1 [default = SLAVERY_HANDSHAKE];
  optional bytes master_mac_addr = 2 [(nanopb).max_size = 6, (nanopb).fixed_length = true];
  optional bytes slave_mac_addr = 3 [(nanopb).max_size = 6, (nanopb).fixed_length = true];
}

message SyncTime {
  required MessageType message_type = 1 [default = SYNC_TIME];
  optional int64 master_timestamp = 2;
}

message SleepCycle {
  required int64 sleep_time = 1;
}

message SampleRate {
  required uint64 rate = 1;
}

message ACK {
  required int64 id = 1;
}

message NACK {
  required int64 id = 1;
}
